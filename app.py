'''app.py'''

from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + 'cve_database.db'

db = SQLAlchemy(app)


class CVE(db.Model):
    __tablename__ = 'cve'

    cve_id = db.Column(db.String(20), primary_key=True)
    severity = db.Column(db.String(20))
    cvss = db.Column(db.Float)
    affected_packages = db.Column(db.String(255))
    description = db.Column(db.Text)
    cwe_id = db.Column(db.String(20))

# Define route for the root URL
@app.route('/')
def index():
    return 'Welcome to the CVE management system!'

# API endpoint to retrieve details of a specific CVE
@app.route('/cve/<cve_id>', methods=['GET'])
def get_cve(cve_id):
    try:
        cve = CVE.query.get(cve_id)
        if cve:
            return jsonify({
                'cve_id': cve.cve_id,
                'severity': cve.severity,
                'cvss': cve.cvss,
                'affected_packages': cve.affected_packages,
                'description': cve.description,
                'cwe_id': cve.cwe_id
            }), 200
        else:
            return jsonify({'error': 'CVE not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# API endpoint to retrieve all CVE data
@app.route('/cve/all', methods=['GET'])
def get_all_cves():
    try:
        cves = CVE.query.all()
        cve_list = [{
            'cve_id': cve.cve_id,
            'severity': cve.severity,
            'cvss': cve.cvss,
            'affected_packages': cve.affected_packages,
            'description': cve.description,
            'cwe_id': cve.cwe_id
        } for cve in cves]
        return jsonify(cve_list), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# API endpoint to add a new CVE record
@app.route('/cve/addCVE', methods=['POST'])
def add_cve():
    try:
        data = request.json
        if 'cve_id' not in data:
            return jsonify({'error': 'CVE ID is required'}), 400
        # Validate other fields if needed
        new_cve = CVE(**data)
        db.session.add(new_cve)
        db.session.commit()
        return jsonify({'message': 'CVE added successfully'}), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# API endpoint to delete a CVE record
@app.route('/cve/<cve_id>', methods=['DELETE'])
def delete_cve(cve_id):
    try:
        cve = CVE.query.get(cve_id)
        if cve:
            db.session.delete(cve)
            db.session.commit()
            return jsonify({'message': 'CVE deleted successfully'}), 200
        else:
            return jsonify({'error': 'CVE not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run()
